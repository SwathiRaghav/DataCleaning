install.packages("KernSmooth")
help(kernsmooth)
KernSmooth?
?KernSmooth
library(KernSmooth)
clear
clear()
for (i in 1:3)
{
data<-read.csv(file_list[i])
#mon<-unique(data$ID)
dt<-na.omit(data[i])
dt1<-nrow(dt)
if dt1 > 150
c<-cor(dt$sulfate,dt$nitrate)
}
head(c)
summary(c)
nrow(dt)
complete <- function(directory,id=1:332)
{
file_list<-list.files(directory,full.names=TRUE)
file_list
out<-data.frame()
for (i in id)
{
data<-read.csv(file_list[i])
mon<-unique(data$ID)
dt<-nrow(na.omit(data))
out1<-data.frame(mon,dt)
out<-rbind(out,out1)
}
return(out)
}
complete("./specdata",1)
complete("./specdata",c(2, 4, 8, 10, 12))
complete("./specdata",30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<NULL
}
get<-funtion()
{
x
}
setinverse<-funtion(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x<-1:4
k<-makeCacheMatrix(x)
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<NULL
}
get<-funtion()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x<-1:4
k<-makeCacheMatrix(x)
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-funtion()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x<-1:4
k<-makeCacheMatrix(x)
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-function()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
x<-1:4
k<-makeCacheMatrix(x)
k$set()
k$getinverse(solve(x))
x<-matrix(1:4,2,2)
x
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-function()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
x<-matrix(1:4,2,2)
cacheSolve(x
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-function()
{
x
}
setinverse<-function(inverse)
{
inv<-solve
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
x<-matrix(1:4,2,2)
cacheSolve(x)
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-function()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
x<-matrix(1:4,2,2)
cacheSolve(x)
makeCacheMatrix<-function(x=matrix())
{
inv<-NULL
set<-function(y)
{
x<<-y
inv<<-NULL
}
get<-function()
{
x
}
setinverse<-function(inverse)
{
inv<-inverse
}
getinverse<-function()
{
inv
}
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
p<-matrix(1:4,2,2)
cacheSolve(p)
p<-matrix(1:4,2,2)
m<-makeCacheMatrix
cacheSolve(m)
p<-matrix(1:4,2,2)
m<-makeCacheMatrix(p)
cacheSolve(m)
solve(p)
library(datasets)
data(iris)
?iris
data(iris)
d<-data(iris)
d
d<-data(iris)
d
print(d)
head(d)
d<-data.frame(data(iris))
head(d)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof()
fit <- lm(y ~ x1 + x2)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
x
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
setwd("C:/Users/raghav/Downloads/Coursera/DataCleaning")
library(reshape2)
xtrain<-read.csv("./UCI HAR Dataset/train/X_train.txt",sep="",header=FALSE)
#head(xtrain,5)
#ncol(xtrain)
ytrain<-read.csv("./UCI HAR Dataset/train/y_train.txt",sep="",header=FALSE)
#head(ytrain,5)
#ncol(ytrain)
subjecttrain<-read.csv("./UCI HAR Dataset/train/subject_train.txt",sep="",header=FALSE)
#head(subjecttrain,5)
#ncol(subjecttrain)
library(plyr)
install.packages("plyr")
library(plyr)
library(reshape2)
xtest<-read.csv("./UCI HAR Dataset/test/X_test.txt",sep="",header=FALSE)
#head(xtest,5)
#ncol(xtest)
ytest<-read.csv("./UCI HAR Dataset/test/y_test.txt",sep="",header=FALSE)
#head(ytest,5)
#ncol(ytest)
subjecttest<-read.csv("./UCI HAR Dataset/test/subject_test.txt",sep="",header=FALSE)
#head(subjecttest,5)
#ncol(subjecttest)
xdata<-rbind(xtrain,xtest)
ydata<-rbind(ytrain,ytest)
subjectdata<-rbind(subjecttrain,subjecttest)
Alldata<-cbind(subjectdata,ydata,xdata)
dim(Alldata)
featuredata[,2] <- as.character(featuredata[,2])
featureswanted<-grep("mean|std",featuredata[,2])
selected_data<-Alldata[,Alldata[1],Alldata[2],featureswanted]
featuredata<-read.csv("./UCI HAR Dataset/features.txt",sep="",header=FALSE)
#######selectining only mean and standard deviation columns from the merged data#####
featuredata[,2] <- as.character(featuredata[,2])
featureswanted<-grep("mean|std",featuredata[,2])
selected_data<-Alldata[,Alldata[1],Alldata[2],featureswanted]
selected_data<-Alldata[,Alldata[,1],Alldata[,2],featureswanted]
featureswanted
featuredata
featureswanted
Alldata_x<-Alldata[,-Alldata[1],-Alldata[2]]
Alldata_x<-Alldata[,-c(1,2)]
head(Alldata_x,4)
dim(Alldata_x)
selected_data_x<-Alldata_x[,featureswanted]
dim(selected_data_x)
head(selected_data_x,3)
selected_data<-Alldata_x[,featureswanted]
dim(selected_data)
head(selected_data,3)
selected_data[,1]<-Alldata[,1]
selected_data[,2]<-Alldata[,2]
dim(selected_data)
selected_data<-Alldata_x[,featureswanted]
selected_data[,1]<-Alldata[,1]
selected_data[,2]<-Alldata[,2]
dim(selected_data)
selected_data<-cbind(Alldata[1:2],selected_data)
dim(selected_data)
head(selected_data,3)
selected_data<-Alldata_x[,featureswanted]
head(selected_data,3)
head(Alldata[1:3],5)
selected_data<-cbind(Alldata[1:2],selected_data)
head(selected_data,3)
dim(selected_data)
activity<-read.csv("./UCI HAR Dataset/activity_labels.txt",sep="",header=FALSE)
########### descriptive activity names to name the activities in the data set #####
selected_data[,2]<-activity[selected_data[,2],2]
######## labels the data set with descriptive variable names ####
names(selected_data)<-c("Subject","Activity",featuredata[featureswanted,2])
head(selected_data,3)
dim(selected_data)
tidydata<-melt(selected_data,id=c("Subject","Activity"))
head(tidydata,4)
dim(tidydata)
avgdata<-dcast(tidydata,Subject+Activity~variable,mean)
head(avgdata,4)
dim(avgdata)
library(xlsx)
write.xlsx(avgdata,file="./prjavg.xlsx")
featuredata[,2]
getwd()
setwd("C:/Users/raghav/Downloads/Coursera/DataCleaning")
library(plyr)
library(reshape2)
library(xlsx)
####### reading train data set ######
xtrain<-read.csv("./UCI HAR Dataset/train/X_train.txt",sep="",header=FALSE)
ytrain<-read.csv("./UCI HAR Dataset/train/y_train.txt",sep="",header=FALSE)
subjecttrain<-read.csv("./UCI HAR Dataset/train/subject_train.txt",sep="",header=FALSE)
######## reading test dataset ########
xtest<-read.csv("./UCI HAR Dataset/test/X_test.txt",sep="",header=FALSE)
ytest<-read.csv("./UCI HAR Dataset/test/y_test.txt",sep="",header=FALSE)
subjecttest<-read.csv("./UCI HAR Dataset/test/subject_test.txt",sep="",header=FALSE)
xdata<-rbind(xtrain,xtest)
ydata<-rbind(ytrain,ytest)
subjectdata<-rbind(subjecttrain,subjecttest)
##### Merging the traing and test data#####
Alldata<-cbind(subjectdata,ydata,xdata)
############  reading Variable (feature) data #####
featuredata<-read.csv("./UCI HAR Dataset/features.txt",sep="",header=FALSE)
#######selectining only mean and standard deviation columns from the merged data#####
featuredata[,2] <- as.character(featuredata[,2])
featureswanted<-grep("mean|std",featuredata[,2])
Alldata_x<-Alldata[,-c(1,2)]
selected_data<-Alldata_x[,featureswanted]
selected_data<-cbind(Alldata[1:2],selected_data)
############  reading Activity lables data #####
activity<-read.csv("./UCI HAR Dataset/activity_labels.txt",sep="",header=FALSE)
########### descriptive activity names to name the activities in the data set #####
selected_data[,2]<-activity[selected_data[,2],2]
######## labels the data set with descriptive variable names ####
names(selected_data)<-c("Subject","Activity",featuredata[featureswanted,2])
#### Independent tidy data set with the average of each variable for each activity and each subject####
tidydata<-melt(selected_data,id=c("Subject","Activity"))
avgdata<-dcast(tidydata,Subject+Activity~variable,mean)
head(avgdata,4)
dim(avgdata)
write.xlsx(avgdata,file="./prjavg.xlsx")
#########################################
write.xlsx(avgdata,file="./prjavg.xlsx")
write.xlsx(avgdata,file="./prjavg.xlsx")
write.table(avgdata,file="./prjavg.txt")
write.xlsx(avgdata,file="./prjavg.xlsx")
